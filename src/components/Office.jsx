/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import React, { useRef } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import { useLayoutEffect, useRef } from "react";

export const FLOOR_HEIGHT = 2.114;
export const NB_FLOORS = 3;

export function Office(props) {
  const { nodes, materials } = useGLTF("./models/Office.glb");
  const ref = useRef();
  const tl = useRef();
  const libraryRef = useRef();
  const atticRef = useRef();

  const scroll = useScroll();
  useFrame(() => {
    console.log(scroll);
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();
    // console.log(tl.current, ref.current.position);

    // Vertical Animation
    tl.current.to(
      ref.current.position,
      {
        duration: 3,
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1) * (1.15 - scroll.offset),
        // y: -FLOOR_HEIGHT,
      },
      0
    );

    // // Office Position
    tl.current.to(
      ref.current.position,
      {
        duration: 0.75,
        x: -3,
        z: 2,
      },
      0
    );
    tl.current.to(
      ref.current.position,
      {
        duration: 0.75,
        x: 2,
        z: 4,
      },
      0.75
    );
    // tl.current.to(
    //   ref.current.position,
    //   {
    //     duration: 0.75,
    //     x: -2,
    //     z: 0,
    //   },
    //   1.5
    // );
    // // Office Rotation
    // tl.current.to(
    //   ref.current.rotation,
    //   {
    //     duration: 0.25,
    //     // x: -Math.PI / 18,
    //     y: Math.PI / 2,
    //     // z: -Math.PI / 12,
    //   },
    //   0
    // );
    tl.current.to(
      ref.current.rotation,
      {
        duration: 0.25,
        // x: -Math.PI / 18,
        y: Math.PI / 8,
        // z: -Math.PI / 12,
      },
      0.75
    );
    tl.current.to(
      ref.current.rotation,
      {
        duration: 0.25,
        // x: -Math.PI / 18,
        y: -Math.PI / 8,
        // z: -Math.PI / 12,
      },
      1
    );
    // tl.current.to(
    //   ref.current.rotation,
    //   {
    //     duration: 1,
    //     y: -Math.PI / 4,
    //   },
    //   0.5
    // );
    // // Office Movement
    // // tl.current.to(
    // //   ref.current.position,
    // //   {
    // //     duration: 1,
    // //     x: 0,
    // //     z: 2,
    // //   },
    // //   0
    // // );
    // // tl.current.to(
    // //   ref.current.position,
    // //   {
    // //     duration: 1,
    // //     x: 0,
    // //     y: 1,
    // //     z: 2,
    // //   },
    // //   1
    // // );

    // // Library Floor
    // tl.current.from(
    //   libraryRef.current.position,
    //   {
    //     duration: 0.25,
    //     x: 2,
    //     y: 1,
    //   },
    //   0
    // );
    // tl.current.to(
    //   libraryRef.current.position,
    //   {
    //     duration: 0.25,
    //     x: -1,
    //   },
    //   0.75
    // );
    tl.current.to(
      libraryRef.current.rotation,
      {
        duration: 0.25,
        y: -Math.PI / 2,
        // y: 0,
      },
      0.75
    );
    // tl.current.to(
    //   libraryRef.current.position,
    //   {
    //     duration: 0.5,
    //     // y: -2.114,
    //     // y: 1,
    //     x: 1,
    //   },
    //   0
    // );

    // Attic Floor
    tl.current.to(
      atticRef.current.position,
      {
        duration: 0.25,
        x: 2,
        z: -2,
      },
      0.75
    );
    tl.current.to(
      atticRef.current.position,
      {
        duration: 0.25,
        x: 1,
        z: -2,
      },
      1.25
    );
    //   tl.current.from(
    //     atticRef.current.rotation,
    //     {
    //       duration: 1.5,
    //       y: Math.PI / 2,
    //     },
    //     1
    //   );
    tl.current.to(
      atticRef.current.rotation,
      {
        duration: 0.25,
        // y: Math.PI / 3,
      },
      0.75
    );
    //   tl.current.to(
    //     atticRef.current.position,
    //     {
    //       duration: 0.5,
    //       x: 2,
    //       z: -2,
    //     },
    //     1.5
    //   );
  });

  return (
    <group
      {...props}
      dispose={null}
      ref={ref}
      position={[2.3, 0, 0]}
      rotation={[-Math.PI / 36, -Math.PI / 4, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["01_office"].geometry}
        material={materials["01"]}
      />
      <group position={[0, 2.114, -2.23]}>
        <group ref={libraryRef}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["02_library"].geometry}
            material={materials["02"]}
          />
        </group>
      </group>
      <group position={[-1.97, 4.227, -2.199]}>
        <group ref={atticRef}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["03_attic"].geometry}
            material={materials["03"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/Office.glb");
